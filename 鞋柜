#pragma config(Sensor, dgtl1,  LimitUp,        sensorTouch)
#pragma config(Sensor, dgtl2,  LimitMd,        sensorTouch)
#pragma config(Sensor, dgtl3,  LimitDn,        sensorTouch)
#pragma config(Sensor, dgtl4,  LimitSwap,      sensorTouch)
#pragma config(Sensor, dgtl5,  LimitFirst,     sensorTouch)
#pragma config(Sensor, dgtl6,  LimitSecond,    sensorTouch)
#pragma config(Sensor, dgtl7,  LimitThird,     sensorTouch)
#pragma config(Sensor, dgtl8,  BtnA,           sensorTouch)
#pragma config(Sensor, dgtl9,  BtnB,           sensorTouch)
#pragma config(Sensor, dgtl10, BtnC,           sensorTouch)
#pragma config(Sensor, dgtl11, BtnD,           sensorTouch)
#pragma config(Motor,  port2,           MainMotor,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           SwapMotor,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           FirstMotor,    tmotorVex393_MC29, openLoop
#pragma config(Motor,  port5,           SecondMotor,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           ThirdMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           BrushMotor,    tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define MainMotor_UP	50
#define MainMotor_DN	-15

#define SwapMotor_Push	50
#define SwapMotor_Back	-20
#define SwapMotor_Push_Time	900

#define FirstMotor_Push	-50
#define FirstMotor_Back 20
#define FirstMotor_Push_Time	900

#define SecondMotor_Push	-50
#define SecondMotor_Back	20
#define SecondMotor_Push_Time	900

#define ThirdMotor_Push	-50
#define ThirdMotor_Back	20
#define ThirdMotor_Push_Time	900

#define BrushSpeed	20
#define BrushTime	2000
#define SterilizeTime	2000

bool Check_BtnA()
{
	if(SensorValue[BtnA]==1)
	{
		wait(100,milliseconds);
		if(SensorValue[BtnA]==1)
			return true;
		else
			return false;
	}
	else
		return false;
}

bool Check_BtnB()
{
	if(SensorValue[BtnB]==1)
	{
		wait(100,milliseconds);
		if(SensorValue[BtnB]==1)
			return true;
		else
			return false;
	}
	else
		return false;
}

bool Check_BtnC()
{
	if(SensorValue[BtnC]==1)
	{
		wait(100,milliseconds);
		if(SensorValue[BtnC]==1)
			return true;
		else
			return false;
	}
	else
		return false;
}

void Until_MainMotor_Up()
{
	setMotor(MainMotor,MainMotor_UP);
	while(SensorValue[LimitUp]==0)
		wait1Msec(1);
	stopMotor(MainMotor);
	//
	wait(500,milliseconds);
}

void Until_MainMotor_Dn()
{
	setMotor(MainMotor,MainMotor_DN);
	while(SensorValue[LimitDn]==0)
		wait1Msec(1);
	stopMotor(MainMotor);
	//
	wait(500,milliseconds);
}

void Until_MainMotor_Md(int speed)
{
	setMotor(MainMotor,speed);
	while(SensorValue[LimitMd]==1)
		wait1Msec(1);
	stopMotor(MainMotor);
	//
	wait(500,milliseconds);
}

void Until_SwapMotor_Done()
{
	setMotor(SwapMotor,SwapMotor_Push);
	wait(SwapMotor_Push_Time,milliseconds);
	stopMotor(SwapMotor);
	//
	wait(500,milliseconds);
	//
	setMotor(SwapMotor,SwapMotor_Back);
	while(SensorValue[LimitSwap]==0)
		wait1Msec(1);
	stopMotor(SwapMotor);
	//
	wait(500,milliseconds);
}

void Until_FirstMotor_Done()
{
	setMotor(FirstMotor,FirstMotor_Push);
	wait(FirstMotor_Push_Time,milliseconds);
	stopMotor(FirstMotor);
	//
	wait(500,milliseconds);
	//
	setMotor(FirstMotor,FirstMotor_Back);
	while(SensorValue[LimitFirst]==0)
		wait1Msec(1);
	stopMotor(FirstMotor);
	//
	wait(500,milliseconds);
}

void Until_SecondMotor_Done()
{
	setMotor(SecondMotor,SecondMotor_Push);
	wait(SecondMotor_Push_Time,milliseconds);
	stopMotor(SecondMotor);
	//
	wait(500,milliseconds);
	//
	setMotor(SecondMotor,SecondMotor_Back);
	while(SensorValue[LimitSecond]==0)
		wait1Msec(1);
	stopMotor(SecondMotor);
	//
	wait(500,milliseconds);
}

void Until_ThirdMotor_Done()
{
	setMotor(ThirdMotor,ThirdMotor_Push);
	wait(ThirdMotor_Push_Time,milliseconds);
	stopMotor(ThirdMotor);
	//
	wait(500,milliseconds);
	//
	setMotor(ThirdMotor,ThirdMotor_Back);
	while(SensorValue[LimitThird]==0)
		wait1Msec(1);
	stopMotor(ThirdMotor);
	//
	wait(500,milliseconds);
}

void Swap_BackTo()
{
	setMotor(SwapMotor,SwapMotor_Back);
	while(SensorValue[LimitSwap]==0)
		wait1Msec(1);
	stopMotor(SwapMotor);
}

void First_BackTo()
{
	setMotor(FirstMotor,FirstMotor_Back);
	while(SensorValue[LimitFirst]==0)
		wait1Msec(1);
	stopMotor(FirstMotor);
}

void Second_BackTo()
{
	setMotor(SecondMotor,SecondMotor_Back);
	while(SensorValue[LimitSecond]==0)
		wait1Msec(1);
	stopMotor(SecondMotor);
}

void Third_BackTo()
{
	setMotor(ThirdMotor,ThirdMotor_Back);
	while(SensorValue[LimitThird]==0)
		wait1Msec(1);
	stopMotor(ThirdMotor);
}

void Brush()
{
	setMotor(BrushMotor,BrushSpeed);
	wait(BrushTime,milliseconds);
	stopMotor(BrushMotor);
}

void Sterilize()
{
	wait(SterilizeTime,milliseconds);
}

void BtnA_ToDo()//Brush&Store
{
	//==================================
	Until_MainMotor_Md(MainMotor_UP);
	Until_SwapMotor_Done();
	//==================================
	Brush();
	//==================================
	Until_SecondMotor_Done();
	//==================================
	Until_MainMotor_Up();
	Until_SwapMotor_Done();
	//==================================
	Until_MainMotor_Dn();
}

void BtnB_ToDo()//Brush&Sterilize&Store
{
	//==================================
	Until_MainMotor_Md(MainMotor_UP);
	Until_SwapMotor_Done();
	//==================================
	Brush();
	//==================================
	Until_SecondMotor_Done();
	//==================================
	Until_MainMotor_Dn();
	Until_SwapMotor_Done();
	//==================================
	Sterilize();
	//==================================
	Until_ThirdMotor_Done();
	//==================================
	Until_MainMotor_Up();
	Until_SwapMotor_Done();
	//==================================
	Until_MainMotor_Dn();
}

void BtnC_ToDo()//Get
{
	//==================================
	Until_MainMotor_Up();
	Until_FirstMotor_Done();
	Until_MainMotor_Dn();
}

task main()
{
	//
	Until_MainMotor_Dn();
	//
	Swap_BackTo();
	First_BackTo();
	Second_BackTo();
	Third_BackTo();

	while(true)
	{
		/*while(true)
		{
			if(Check_BtnA()==true)
				Until_FirstMotor_Done();
			if(Check_BtnB()==true)
				Until_SecondMotor_Done();
			if(Check_BtnC()==true)
				Until_ThirdMotor_Done();
		}*/

		if(Check_BtnA()==true)
			BtnA_ToDo();
		if(Check_BtnB()==true)
			BtnB_ToDo();
		if(Check_BtnC()==true)
			BtnC_ToDo();
	}
}
